#!/usr/bin/env bash

fen=$1; shift
test -z "$fen" && fen=

cmd=./dummy_chess_uci
test -z "$fen" && {
  openings=
} || {
  echo "[FEN \"$fen\"]" > /tmp/startfen
  openings="-openings file=/tmp/startfen format=pgn"
}
option_load_syzygy="setoption name SyzygyPath value external/syzygy/src"
cutechess-cli -engine name='d1' cmd="$cmd" tc="100/0:30+0" dir=. restart=off proto=uci initstr="$option_load_syzygy" \
              -engine name="d2" cmd="$cmd" tc="100/0:30+0" dir=. restart=off proto=uci initstr="$option_load_syzygy" \
              -variant standard \
              $openings \
              -srand 0 -debug \
              | env python3 -c "
import sys
import chess
import chess.pgn

board = chess.Board()
if len('$fen') > 0:
    board.set_fen('$fen')
moves = []
seen = 0
for line in sys.stdin:
    filt = 'position fen $fen moves' if len('$fen') > 0 else 'position startpos moves'
    if filt in line:
        new_moves = line[line.index(filt) + len(filt) + 1:].split()
        #print(new_moves)
        assert len(new_moves) >= len(moves), f'{new_moves} >= {moves}'
        assert new_moves[:len(moves)] == moves, f'{new_moves} !startsWith {moves}'
        ply = len(moves)
        for next_move in new_moves[len(moves):]:
            ply += 1
#            if (ply & 1) == 1:
#                sys.stdout.write(f'{(ply + 1) // 2}. ')
            m = board.parse_uci(next_move)
            board.push(m)
#            sys.stdout.write(f'{next_move} ')
#            sys.stdout.flush()
            moves.append(next_move)
        g = chess.pgn.Game.from_board(board)
        s = str(g).split('\n')[-1][:-1]
        sys.stdout.write(s[seen:])
        sys.stdout.flush()
        seen = len(s)
print(board.result())
#print(str(g).split('\n')[-1], board.result())
"
